# Note: This GitLab CI configuration is used for internal testing, users can ignore it.
include:
    - project: '${CI_PROJECT_NAMESPACE}/ci-libs-for-client-libraries'
      file:
          - '/${CI_PROJECT_NAME}/.gitlab-ci.yml'

# Global --------------------------

image: node:latest

cache:
    key:
        files:
            - package.json
            - package-lock.lock
    paths:
        - node_modules/

stages:
    - check
    - build
    - test
    - publish

before_script:
    - npm install

# stage: check ----------------------

eslint:
    stage: check
    script:
        - npm run lint

audit:
    stage: check
    script:
        - npm audit

format:
    stage: check
    script:
        - npm run format

# stage: build ----------------------

build:
    stage: build
    script:
        - npm run clean
        - npm run build
    artifacts:
        paths:
            - dist

# stage: test ----------------------

test:
    stage: test
    extends: .test
    parallel:
        matrix:
            - DOCKER_IMAGE: 'node:18'
            - DOCKER_IMAGE: 'node:12'
              USE_MOCK_SERVER: 'use mock server'
            - DOCKER_IMAGE: 'node:14'
              USE_MOCK_SERVER: 'use mock server'
            - DOCKER_IMAGE: 'node:16'
              USE_MOCK_SERVER: 'use mock server'
            - DOCKER_IMAGE: 'node:17'
              USE_MOCK_SERVER: 'use mock server'
            - DOCKER_IMAGE: 'node:18'
              USE_MOCK_SERVER: 'use mock server'
    image: ${DOCKER_IMAGE}
    script:
        - >
            if [[ ! -z "${USE_MOCK_SERVER}" ]]; then
              echo "Using mock server"
              export DEEPL_SERVER_URL=http://deepl-mock:3000
              export DEEPL_MOCK_SERVER_PORT=3000
              export DEEPL_PROXY_URL=http://deepl-mock:3001
              export DEEPL_MOCK_PROXY_SERVER_PORT=3001
            fi
        - npm run test:coverage
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage/clover.xml
            junit:
                - junit.xml
        when: always

examples:
    stage: test
    extends: .test
    parallel:
        matrix:
            - DOCKER_IMAGE: 'node:12'
            - DOCKER_IMAGE: 'node:14'
            - DOCKER_IMAGE: 'node:16'
            - DOCKER_IMAGE: 'node:17'
            - DOCKER_IMAGE: 'node:18'
    image: ${DOCKER_IMAGE}
    before_script: # Note: replaces global before_script
        - npm install --production
    script:
        - export DEEPL_AUTH_KEY=mock-auth-key
        - export DEEPL_SERVER_URL=http://deepl-mock:3000
        - export DEEPL_MOCK_SERVER_PORT=3000
        - export DEEPL_PROXY_URL=http://deepl-mock:3001
        - export DEEPL_MOCK_PROXY_SERVER_PORT=3001
        - cd $CI_PROJECT_DIR/examples/commonjs
        - npm install
        - node index.js
        - cd $CI_PROJECT_DIR/examples/esmodule
        - npm install
        - node index.js
        - cd $CI_PROJECT_DIR/examples/typescript
        - npm install
        - npm run build
        - node index.js

# stage: publish ----------------------

publish to NPM:
    stage: publish
    extends: .publish
    dependencies:
        - build
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
    script:
        - npm config set //registry.npmjs.org/:_authToken ${NPM_PUBLISH_TOKEN}
        - npm publish
